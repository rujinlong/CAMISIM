executor {
    name = 'slurm'
    queueSize = 95
    submitRateLimit = '30 / 1min'
}

profiles {
    // The following settings are used by the denglab cluster. Please change them to fit your cluster.
    // ex. binding path for singularity and charliecloud, queue name, clusterOptions, time limit, etc.
    singularity_hmgu {
        singularity.runOptions = "--writable-tmpfs -B /ictstr01/project/genomics -B /ictstr01/home/viro/jinlong.ru"
        queueSize=50
    }

    charliecloud_lrz {
        charliecloud.runOptions = "--no-passwd -b /dss -b /gpfs"
        queueSize=50
    }

    denglab_hmgu {
        process.executor       = 'slurm'
        process.cpus           = { check_max( 1 * task.attempt, 'cpus') }
        process.memory         = { check_max( 4.GB * task.attempt, 'memory') }
        process.queue          = 'cpu_p'
        process.clusterOptions = '-q cpu_normal'
        process.time           = { check_max( 71.h * task.attempt, 'time') }
    }

    denglab_lrz {
        process.executor       = 'slurm'
        process.cpus           = { check_max( 1 * task.attempt, 'cpus') }
        process.memory         = { check_max( 2.GB * task.attempt, 'memory') }
        process.queue          = 'serial_std'
        process.clusterOptions = '--clusters=serial'
        process.time           = { check_max( 12.h * task.attempt, 'time') }
    }

    debug { process.beforeScript = 'echo $HOSTNAME' }
    standard {
        process.executor       = 'local'
        process.cpus           = 1
        process.memory         = 1.GB
    }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
}


process {
    errorStrategy = 'ignore'
    maxRetries    = 1
}

params {
    outdir = "output"
    simulate_fastq_directly = true
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}